-----------
ΜΕΡΙΚΑ ΒΑΣΙΚΑ

implicit vs explicit coercion
e.g Χρήση της χαλαρής ισότητας == in "99.99"==99.99. Η  JavaScript μετατρέπει το
αριστερό μέρος "99.99" σε αριθμό , δηλαδή 99.99. Ετσι η ισότητα μετατρέπεται σε
99.99 == 99.99, δηλαδή  true...implicit

Σε ορισμένες γλώσσες δηλώνεις μια variable (container) για να κρατήσει
συγκεκριμένο τύπο μιας αξίας όπως number ή string. Static typing ή  type
enforcement, θεωρείται γενικά πλεονέκτημα του προγραμματισμού γιατί προλαβαίνει
τις μη επιθυμητές  μετατροπές των αξιών (value conversion).
Άλλες γλώσσες δίνουν έμφαση στον τύπο των για τις αξίες (types for values)
αντί των μεταβλητών. O όρος Weak typing ή αλλιώςdynamic typing, επιτρέπει  σε
μια μεταβλητή να κρατά οποιαδήποτε αξία κάθεσ στιγμή. Αυτό θεωρείτε γενικά
πλεονέκτημα για την ευελιξία ενός προγράμματος, το να επιτρέπεις δηλαδή
μια μόνο μεταβλητή να αναπαριστά μια αξία ανεξάρτητα από τον τύπο της κάθε
χρονική στιγμή κατά τη διάρκεια του προγράμματος.
Η JavaScript χρησιμοποιεί την τελευταία προσέγγιση.

console.log( amount );              // 215.9784
console.log( amount.toFixed( 2 ) ); // "215.98"
toFixed(..) η λειτουργία αυτή μας επιτρέπει να καθορίσουμε τα δεκαδικά ψηφία
και μετατέπει σε string.

Από την έκδοση ES6 της JS υπάρχει ο όρος σταθερά:
const TAX_RATE = 0.08;

Τιμές (values) οι οποίες δεν είναι ήδη ενός ορισμένου αναμενόμενου τύπυ συχνά
εξαναγκάζονται (coerced) σε αυτόν. Η δήλωση if προϋποθέτει boolean, αλλά αν της
περάσεις κάτι που δεν είναι θα συμβεί αυτό το φαινόμενο (coercion).

Με την δήλωση break μπορούμε να σταματήσουμε ένα βρόγχο.

SCOPE ή lexical scope. Στην JS κάθε συνάρτηση έχει το δικό της πεδίο
εφαρμογής (scope) το οποίο στην ουσία είναι μια συλλογή μεταβλητών και κανόνων
για το πως αυτές οι μεταβλητές προσεγγίζονται με το όνομα τους. Μόνο κώδικας
εντός της συνάρτησης μπορεί να έχει πρόσβαση στις μεταβλητές (scoped variables)
αυτής της συνάρτησης.
Το όνομα μιας μεταβλητής πρέπει να είναι μοναδικό μέσα στο ίδιο scope, ενώ η
ίδια μεταβλητή μπορεί να υπάρχει σε διαφορετικά.

function one() {
    // this `a` only belongs to the `one()` function
    var a = 1;
    console.log( a );
}

function two() {
    // this `a` only belongs to the `two()` function
    var a = 2;
    console.log( a );
}

one();      // 1
two();      // 2

Επίσης ένα scope μπορεί να εμφωλευθεί εντός ενός άλλου, ενώ ο κώδικας του
εσωτερικού έχει πρόσβαση στις μεταβλητές και των δύο (εσωτερικου και εξωτερικού)

function outer() {
    var a = 1;

    function inner() {
        var b = 2;

        // we can access both `a` and `b` here
        console.log( a + b );   // 3
    }

    inner();

    // we can only access `a` here
    console.log( a );           // 1
}

outer();
