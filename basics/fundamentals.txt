-----------
alert(a);

age=prompt("Please tell me your age:");
console.log(age);

implicit vs explicit coercion
e.g Χρήση της χαλαρής ισότητας == in "99.99"==99.99.  JavaScript μετατρέπει το
αριστερό μέρος "99.99" σε αριθμό , δηλαδή 99.99. Ετσι η ισότητα μετατρέπεται σε
99.99 == 99.99, δηλαδή  true...that's implicit

Σε ορισμένες γλώσσες δηλώνεις μια variable (container) για να κρατήσει
συγκεκριμένο τύπο μιας αξίας όπως number or string. Static typing ή  type
enforcement, θεωρείται γενικά πλεονέκτημα του προγραμματισμού γιατί προλαβαίνει
unintended value conversions.
Other languages emphasize types for values instead of variables. Weak typing,
otherwise known as dynamic typing, allows a variable to hold any type of value
at any time. It's typically cited as a benefit for program flexibility by
allowing a single variable to represent a value no matter what type form that
value may take at any given moment in the program's logic flow.
JavaScript uses the latter approach, dynamic typing, meaning variables can hold
values of any type without any type enforcement.

console.log( amount );              // 215.9784
console.log( amount.toFixed( 2 ) ); // "215.98"
toFixed(..) lets us specify how many decimal places we'd like the number
rounded to, and it produces the string as necessary.

The newest version of JavaScript at the time of this writing (commonly called
"ES6") includes a new way to declare constants, by using const instead of var:
// as of ES6:
const TAX_RATE = 0.08;

As we discussed in "Values & Types" earlier, values that aren't already of an
expected type are often coerced to that type. The if statement expects a
boolean, but if you pass it something that's not already boolean, coercion
will occur.
